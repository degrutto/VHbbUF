/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOEMGAUSSIAN
#define ROOEMGAUSSIAN

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
//#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
//#include "RooAbsCategory.h"
#include "RooMath.h"
 
class RooEMGaussian : public RooAbsPdf {
public:
  enum Type { Normal, Flipped };

  RooEMGaussian() {} ; 
  RooEMGaussian(const char *name, const char *title,
	      RooAbsReal& _x,
	      RooAbsReal& _mean,
	      RooAbsReal& _sigma,
	      RooAbsReal& _lambda,
	      Type type=Normal);
  RooEMGaussian(const RooEMGaussian& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new RooEMGaussian(*this,newname); }
  inline virtual ~RooEMGaussian() { }

  //Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  //Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

  //Int_t getGenerator(const RooArgSet& directVars, RooArgSet &generateVars, Bool_t staticInitOK=kTRUE) const;
  //void initGenerator(Int_t code) {} ; // optional pre-generation initialization
  //void generateEvent(Int_t code);

protected:

  Double_t logErfC(Double_t x) const ;
  Double_t evalCerfRe(Double_t u, Double_t c) const ;
  Double_t evalCerfInt(Double_t sign, Double_t lamb, Double_t umin, Double_t umax, Double_t c) const ;

  RooRealProxy x ;
  RooRealProxy mean ;
  RooRealProxy sigma ;
  RooRealProxy lambda ;
  Bool_t _flip ;
  Bool_t _asympInt ;
  
  Double_t evaluate() const ;

private:

  ClassDef(RooEMGaussian,1) // Your description goes here...
};
 
#endif
